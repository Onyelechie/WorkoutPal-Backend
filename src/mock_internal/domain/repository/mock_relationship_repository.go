// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/repository (interfaces: RelationshipRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRelationshipRepository is a mock of RelationshipRepository interface.
type MockRelationshipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRelationshipRepositoryMockRecorder
}

// MockRelationshipRepositoryMockRecorder is the mock recorder for MockRelationshipRepository.
type MockRelationshipRepositoryMockRecorder struct {
	mock *MockRelationshipRepository
}

// NewMockRelationshipRepository creates a new mock instance.
func NewMockRelationshipRepository(ctrl *gomock.Controller) *MockRelationshipRepository {
	mock := &MockRelationshipRepository{ctrl: ctrl}
	mock.recorder = &MockRelationshipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationshipRepository) EXPECT() *MockRelationshipRepositoryMockRecorder {
	return m.recorder
}

// FollowUser mocks base method.
func (m *MockRelationshipRepository) FollowUser(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockRelationshipRepositoryMockRecorder) FollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockRelationshipRepository)(nil).FollowUser), arg0, arg1)
}

// ReadUserFollowers mocks base method.
func (m *MockRelationshipRepository) ReadUserFollowers(arg0 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserFollowers", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserFollowers indicates an expected call of ReadUserFollowers.
func (mr *MockRelationshipRepositoryMockRecorder) ReadUserFollowers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserFollowers", reflect.TypeOf((*MockRelationshipRepository)(nil).ReadUserFollowers), arg0)
}

// ReadUserFollowing mocks base method.
func (m *MockRelationshipRepository) ReadUserFollowing(arg0 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserFollowing", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserFollowing indicates an expected call of ReadUserFollowing.
func (mr *MockRelationshipRepositoryMockRecorder) ReadUserFollowing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserFollowing", reflect.TypeOf((*MockRelationshipRepository)(nil).ReadUserFollowing), arg0)
}

// UnfollowUser mocks base method.
func (m *MockRelationshipRepository) UnfollowUser(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockRelationshipRepositoryMockRecorder) UnfollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockRelationshipRepository)(nil).UnfollowUser), arg0, arg1)
}
