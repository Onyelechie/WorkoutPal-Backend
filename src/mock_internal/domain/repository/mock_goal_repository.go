// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/repository (interfaces: GoalRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockGoalRepository is a mock of GoalRepository interface.
type MockGoalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGoalRepositoryMockRecorder
}

// MockGoalRepositoryMockRecorder is the mock recorder for MockGoalRepository.
type MockGoalRepositoryMockRecorder struct {
	mock *MockGoalRepository
}

// NewMockGoalRepository creates a new mock instance.
func NewMockGoalRepository(ctrl *gomock.Controller) *MockGoalRepository {
	mock := &MockGoalRepository{ctrl: ctrl}
	mock.recorder = &MockGoalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoalRepository) EXPECT() *MockGoalRepositoryMockRecorder {
	return m.recorder
}

// CreateGoal mocks base method.
func (m *MockGoalRepository) CreateGoal(arg0 int64, arg1 model.CreateGoalRequest) (*model.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoal", arg0, arg1)
	ret0, _ := ret[0].(*model.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGoal indicates an expected call of CreateGoal.
func (mr *MockGoalRepositoryMockRecorder) CreateGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoal", reflect.TypeOf((*MockGoalRepository)(nil).CreateGoal), arg0, arg1)
}

// DeleteGoal mocks base method.
func (m *MockGoalRepository) DeleteGoal(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGoal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGoal indicates an expected call of DeleteGoal.
func (mr *MockGoalRepositoryMockRecorder) DeleteGoal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGoal", reflect.TypeOf((*MockGoalRepository)(nil).DeleteGoal), arg0)
}

// ReadUserGoals mocks base method.
func (m *MockGoalRepository) ReadUserGoals(arg0 int64) ([]*model.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserGoals", arg0)
	ret0, _ := ret[0].([]*model.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserGoals indicates an expected call of ReadUserGoals.
func (mr *MockGoalRepositoryMockRecorder) ReadUserGoals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserGoals", reflect.TypeOf((*MockGoalRepository)(nil).ReadUserGoals), arg0)
}

// UpdateGoal mocks base method.
func (m *MockGoalRepository) UpdateGoal(arg0 model.UpdateGoalRequest) (*model.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGoal", arg0)
	ret0, _ := ret[0].(*model.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGoal indicates an expected call of UpdateGoal.
func (mr *MockGoalRepositoryMockRecorder) UpdateGoal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGoal", reflect.TypeOf((*MockGoalRepository)(nil).UpdateGoal), arg0)
}
