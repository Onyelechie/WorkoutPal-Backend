// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/repository (interfaces: RoutineRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockRoutineRepository is a mock of RoutineRepository interface.
type MockRoutineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoutineRepositoryMockRecorder
}

// MockRoutineRepositoryMockRecorder is the mock recorder for MockRoutineRepository.
type MockRoutineRepositoryMockRecorder struct {
	mock *MockRoutineRepository
}

// NewMockRoutineRepository creates a new mock instance.
func NewMockRoutineRepository(ctrl *gomock.Controller) *MockRoutineRepository {
	mock := &MockRoutineRepository{ctrl: ctrl}
	mock.recorder = &MockRoutineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutineRepository) EXPECT() *MockRoutineRepositoryMockRecorder {
	return m.recorder
}

// AddExerciseToRoutine mocks base method.
func (m *MockRoutineRepository) AddExerciseToRoutine(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExerciseToRoutine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExerciseToRoutine indicates an expected call of AddExerciseToRoutine.
func (mr *MockRoutineRepositoryMockRecorder) AddExerciseToRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExerciseToRoutine", reflect.TypeOf((*MockRoutineRepository)(nil).AddExerciseToRoutine), arg0, arg1)
}

// CreateRoutine mocks base method.
func (m *MockRoutineRepository) CreateRoutine(arg0 int64, arg1 model.CreateRoutineRequest) (*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutine", arg0, arg1)
	ret0, _ := ret[0].(*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutine indicates an expected call of CreateRoutine.
func (mr *MockRoutineRepositoryMockRecorder) CreateRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutine", reflect.TypeOf((*MockRoutineRepository)(nil).CreateRoutine), arg0, arg1)
}

// DeleteRoutine mocks base method.
func (m *MockRoutineRepository) DeleteRoutine(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutine indicates an expected call of DeleteRoutine.
func (mr *MockRoutineRepositoryMockRecorder) DeleteRoutine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutine", reflect.TypeOf((*MockRoutineRepository)(nil).DeleteRoutine), arg0)
}

// ReadRoutineWithExercises mocks base method.
func (m *MockRoutineRepository) ReadRoutineWithExercises(arg0 int64) (*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRoutineWithExercises", arg0)
	ret0, _ := ret[0].(*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRoutineWithExercises indicates an expected call of ReadRoutineWithExercises.
func (mr *MockRoutineRepositoryMockRecorder) ReadRoutineWithExercises(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRoutineWithExercises", reflect.TypeOf((*MockRoutineRepository)(nil).ReadRoutineWithExercises), arg0)
}

// ReadUserRoutines mocks base method.
func (m *MockRoutineRepository) ReadUserRoutines(arg0 int64) ([]*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserRoutines", arg0)
	ret0, _ := ret[0].([]*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserRoutines indicates an expected call of ReadUserRoutines.
func (mr *MockRoutineRepositoryMockRecorder) ReadUserRoutines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserRoutines", reflect.TypeOf((*MockRoutineRepository)(nil).ReadUserRoutines), arg0)
}

// RemoveExerciseFromRoutine mocks base method.
func (m *MockRoutineRepository) RemoveExerciseFromRoutine(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExerciseFromRoutine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExerciseFromRoutine indicates an expected call of RemoveExerciseFromRoutine.
func (mr *MockRoutineRepositoryMockRecorder) RemoveExerciseFromRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExerciseFromRoutine", reflect.TypeOf((*MockRoutineRepository)(nil).RemoveExerciseFromRoutine), arg0, arg1)
}
