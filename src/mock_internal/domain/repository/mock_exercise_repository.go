// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/repository (interfaces: ExerciseRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockExerciseRepository is a mock of ExerciseRepository interface.
type MockExerciseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExerciseRepositoryMockRecorder
}

// MockExerciseRepositoryMockRecorder is the mock recorder for MockExerciseRepository.
type MockExerciseRepositoryMockRecorder struct {
	mock *MockExerciseRepository
}

// NewMockExerciseRepository creates a new mock instance.
func NewMockExerciseRepository(ctrl *gomock.Controller) *MockExerciseRepository {
	mock := &MockExerciseRepository{ctrl: ctrl}
	mock.recorder = &MockExerciseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExerciseRepository) EXPECT() *MockExerciseRepositoryMockRecorder {
	return m.recorder
}

// ReadAllExercises mocks base method.
func (m *MockExerciseRepository) ReadAllExercises() ([]*model.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllExercises")
	ret0, _ := ret[0].([]*model.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllExercises indicates an expected call of ReadAllExercises.
func (mr *MockExerciseRepositoryMockRecorder) ReadAllExercises() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllExercises", reflect.TypeOf((*MockExerciseRepository)(nil).ReadAllExercises))
}

// ReadExerciseByID mocks base method.
func (m *MockExerciseRepository) ReadExerciseByID(arg0 int64) (*model.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExerciseByID", arg0)
	ret0, _ := ret[0].(*model.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExerciseByID indicates an expected call of ReadExerciseByID.
func (mr *MockExerciseRepositoryMockRecorder) ReadExerciseByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExerciseByID", reflect.TypeOf((*MockExerciseRepository)(nil).ReadExerciseByID), arg0)
}
