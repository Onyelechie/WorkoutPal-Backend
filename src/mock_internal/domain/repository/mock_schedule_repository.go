// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/repository (interfaces: ScheduleRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduleRepository is a mock of ScheduleRepository interface.
type MockScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleRepositoryMockRecorder
}

// MockScheduleRepositoryMockRecorder is the mock recorder for MockScheduleRepository.
type MockScheduleRepositoryMockRecorder struct {
	mock *MockScheduleRepository
}

// NewMockScheduleRepository creates a new mock instance.
func NewMockScheduleRepository(ctrl *gomock.Controller) *MockScheduleRepository {
	mock := &MockScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleRepository) EXPECT() *MockScheduleRepositoryMockRecorder {
	return m.recorder
}

// CreateSchedule mocks base method.
func (m *MockScheduleRepository) CreateSchedule(arg0 model.CreateScheduleRequest) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockScheduleRepositoryMockRecorder) CreateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockScheduleRepository)(nil).CreateSchedule), arg0)
}

// DeleteSchedule mocks base method.
func (m *MockScheduleRepository) DeleteSchedule(arg0 model.DeleteScheduleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockScheduleRepositoryMockRecorder) DeleteSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockScheduleRepository)(nil).DeleteSchedule), arg0)
}

// ReadScheduleByID mocks base method.
func (m *MockScheduleRepository) ReadScheduleByID(arg0 int64) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadScheduleByID", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadScheduleByID indicates an expected call of ReadScheduleByID.
func (mr *MockScheduleRepositoryMockRecorder) ReadScheduleByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadScheduleByID", reflect.TypeOf((*MockScheduleRepository)(nil).ReadScheduleByID), arg0)
}

// ReadUserSchedules mocks base method.
func (m *MockScheduleRepository) ReadUserSchedules(arg0 int64) ([]*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserSchedules", arg0)
	ret0, _ := ret[0].([]*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserSchedules indicates an expected call of ReadUserSchedules.
func (mr *MockScheduleRepositoryMockRecorder) ReadUserSchedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserSchedules", reflect.TypeOf((*MockScheduleRepository)(nil).ReadUserSchedules), arg0)
}

// ReadUserSchedulesByDay mocks base method.
func (m *MockScheduleRepository) ReadUserSchedulesByDay(arg0, arg1 int64) ([]*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserSchedulesByDay", arg0, arg1)
	ret0, _ := ret[0].([]*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserSchedulesByDay indicates an expected call of ReadUserSchedulesByDay.
func (mr *MockScheduleRepositoryMockRecorder) ReadUserSchedulesByDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserSchedulesByDay", reflect.TypeOf((*MockScheduleRepository)(nil).ReadUserSchedulesByDay), arg0, arg1)
}

// UpdateSchedule mocks base method.
func (m *MockScheduleRepository) UpdateSchedule(arg0 model.UpdateScheduleRequest) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockScheduleRepositoryMockRecorder) UpdateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockScheduleRepository)(nil).UpdateSchedule), arg0)
}
