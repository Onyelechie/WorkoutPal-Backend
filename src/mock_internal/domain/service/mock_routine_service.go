// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/service (interfaces: RoutineService)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockRoutineService is a mock of RoutineService interface.
type MockRoutineService struct {
	ctrl     *gomock.Controller
	recorder *MockRoutineServiceMockRecorder
}

// MockRoutineServiceMockRecorder is the mock recorder for MockRoutineService.
type MockRoutineServiceMockRecorder struct {
	mock *MockRoutineService
}

// NewMockRoutineService creates a new mock instance.
func NewMockRoutineService(ctrl *gomock.Controller) *MockRoutineService {
	mock := &MockRoutineService{ctrl: ctrl}
	mock.recorder = &MockRoutineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutineService) EXPECT() *MockRoutineServiceMockRecorder {
	return m.recorder
}

// AddExerciseToRoutine mocks base method.
func (m *MockRoutineService) AddExerciseToRoutine(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExerciseToRoutine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExerciseToRoutine indicates an expected call of AddExerciseToRoutine.
func (mr *MockRoutineServiceMockRecorder) AddExerciseToRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExerciseToRoutine", reflect.TypeOf((*MockRoutineService)(nil).AddExerciseToRoutine), arg0, arg1)
}

// CreateRoutine mocks base method.
func (m *MockRoutineService) CreateRoutine(arg0 int64, arg1 model.CreateRoutineRequest) (*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutine", arg0, arg1)
	ret0, _ := ret[0].(*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutine indicates an expected call of CreateRoutine.
func (mr *MockRoutineServiceMockRecorder) CreateRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutine", reflect.TypeOf((*MockRoutineService)(nil).CreateRoutine), arg0, arg1)
}

// DeleteRoutine mocks base method.
func (m *MockRoutineService) DeleteRoutine(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutine indicates an expected call of DeleteRoutine.
func (mr *MockRoutineServiceMockRecorder) DeleteRoutine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutine", reflect.TypeOf((*MockRoutineService)(nil).DeleteRoutine), arg0)
}

// ReadRoutineWithExercises mocks base method.
func (m *MockRoutineService) ReadRoutineWithExercises(arg0 int64) (*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRoutineWithExercises", arg0)
	ret0, _ := ret[0].(*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRoutineWithExercises indicates an expected call of ReadRoutineWithExercises.
func (mr *MockRoutineServiceMockRecorder) ReadRoutineWithExercises(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRoutineWithExercises", reflect.TypeOf((*MockRoutineService)(nil).ReadRoutineWithExercises), arg0)
}

// ReadUserRoutines mocks base method.
func (m *MockRoutineService) ReadUserRoutines(arg0 int64) ([]*model.ExerciseRoutine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserRoutines", arg0)
	ret0, _ := ret[0].([]*model.ExerciseRoutine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserRoutines indicates an expected call of ReadUserRoutines.
func (mr *MockRoutineServiceMockRecorder) ReadUserRoutines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserRoutines", reflect.TypeOf((*MockRoutineService)(nil).ReadUserRoutines), arg0)
}

// RemoveExerciseFromRoutine mocks base method.
func (m *MockRoutineService) RemoveExerciseFromRoutine(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExerciseFromRoutine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExerciseFromRoutine indicates an expected call of RemoveExerciseFromRoutine.
func (mr *MockRoutineServiceMockRecorder) RemoveExerciseFromRoutine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExerciseFromRoutine", reflect.TypeOf((*MockRoutineService)(nil).RemoveExerciseFromRoutine), arg0, arg1)
}
