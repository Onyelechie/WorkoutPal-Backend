// Code generated by MockGen. DO NOT EDIT.
// Source: workoutpal/src/internal/domain/service (interfaces: ScheduleService)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	model "workoutpal/src/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduleService is a mock of ScheduleService interface.
type MockScheduleService struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleServiceMockRecorder
}

// MockScheduleServiceMockRecorder is the mock recorder for MockScheduleService.
type MockScheduleServiceMockRecorder struct {
	mock *MockScheduleService
}

// NewMockScheduleService creates a new mock instance.
func NewMockScheduleService(ctrl *gomock.Controller) *MockScheduleService {
	mock := &MockScheduleService{ctrl: ctrl}
	mock.recorder = &MockScheduleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleService) EXPECT() *MockScheduleServiceMockRecorder {
	return m.recorder
}

// CreateSchedule mocks base method.
func (m *MockScheduleService) CreateSchedule(arg0 model.CreateScheduleRequest) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockScheduleServiceMockRecorder) CreateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockScheduleService)(nil).CreateSchedule), arg0)
}

// DeleteSchedule mocks base method.
func (m *MockScheduleService) DeleteSchedule(arg0 model.DeleteScheduleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockScheduleServiceMockRecorder) DeleteSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockScheduleService)(nil).DeleteSchedule), arg0)
}

// ReadScheduleByID mocks base method.
func (m *MockScheduleService) ReadScheduleByID(arg0 int64) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadScheduleByID", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadScheduleByID indicates an expected call of ReadScheduleByID.
func (mr *MockScheduleServiceMockRecorder) ReadScheduleByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadScheduleByID", reflect.TypeOf((*MockScheduleService)(nil).ReadScheduleByID), arg0)
}

// ReadUserSchedules mocks base method.
func (m *MockScheduleService) ReadUserSchedules(arg0 int64) ([]*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserSchedules", arg0)
	ret0, _ := ret[0].([]*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserSchedules indicates an expected call of ReadUserSchedules.
func (mr *MockScheduleServiceMockRecorder) ReadUserSchedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserSchedules", reflect.TypeOf((*MockScheduleService)(nil).ReadUserSchedules), arg0)
}

// ReadUserSchedulesByDay mocks base method.
func (m *MockScheduleService) ReadUserSchedulesByDay(arg0, arg1 int64) ([]*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserSchedulesByDay", arg0, arg1)
	ret0, _ := ret[0].([]*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserSchedulesByDay indicates an expected call of ReadUserSchedulesByDay.
func (mr *MockScheduleServiceMockRecorder) ReadUserSchedulesByDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserSchedulesByDay", reflect.TypeOf((*MockScheduleService)(nil).ReadUserSchedulesByDay), arg0, arg1)
}

// UpdateSchedule mocks base method.
func (m *MockScheduleService) UpdateSchedule(arg0 model.UpdateScheduleRequest) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockScheduleServiceMockRecorder) UpdateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockScheduleService)(nil).UpdateSchedule), arg0)
}
