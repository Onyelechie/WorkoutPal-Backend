definitions:
  model.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.BasicResponse:
    properties:
      message:
        type: string
    type: object
  model.Comment:
    properties:
      comment:
        type: string
      commentedBy:
        type: string
      date:
        type: string
    type: object
  model.CommentOnPostRequest:
    properties:
      comment:
        type: string
      postId:
        type: integer
    type: object
  model.CreateExerciseRequest:
    properties:
      demo:
        type: string
      description:
        type: string
      expertise:
        type: string
      image:
        type: string
      intensity:
        type: string
      name:
        type: string
      recommendedCount:
        type: integer
      recommendedDuration:
        type: integer
      recommendedSets:
        type: integer
      targets:
        items:
          type: string
        type: array
    type: object
  model.CreateGoalRequest:
    properties:
      deadline:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  model.CreatePostRequest:
    properties:
      caption:
        type: string
      content:
        type: string
      title:
        type: string
    type: object
  model.CreateRoutineRequest:
    properties:
      description:
        type: string
      exerciseIds:
        items:
          type: integer
        type: array
      name:
        type: string
    type: object
  model.CreateScheduleRequest:
    properties:
      dayOfWeek:
        type: integer
      name:
        type: string
      routineIds:
        items:
          type: integer
        type: array
      routineLengthMinutes:
        type: integer
      timeSlot:
        type: string
      userId:
        type: integer
    type: object
  model.CreateUserRequest:
    properties:
      age:
        type: integer
      avatar:
        type: string
      email:
        type: string
      height:
        type: number
      heightMetric:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
      weight:
        type: number
      weightMetric:
        type: string
    type: object
  model.Exercise:
    properties:
      custom:
        type: boolean
      demo:
        type: string
      description:
        type: string
      expertise:
        type: string
      id:
        type: integer
      image:
        type: string
      intensity:
        type: string
      name:
        type: string
      recommendedCount:
        type: integer
      recommendedDuration:
        type: integer
      recommendedSets:
        type: integer
      targets:
        items:
          type: string
        type: array
    type: object
  model.ExerciseRoutine:
    properties:
      createdAt:
        type: string
      description:
        type: string
      exerciseIds:
        items:
          type: integer
        type: array
      exercises:
        items:
          $ref: '#/definitions/model.Exercise'
        type: array
      id:
        type: integer
      isActive:
        type: boolean
      name:
        type: string
      userId:
        type: integer
    type: object
  model.Goal:
    properties:
      createdAt:
        type: string
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        description: '"active", "completed", "paused"'
        type: string
      userId:
        type: integer
    type: object
  model.GoogleAuthRequest:
    properties:
      idToken:
        type: string
    type: object
  model.LikePostRequest:
    properties:
      postID:
        type: integer
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.Post:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      content:
        type: string
      date:
        type: string
      id:
        type: integer
      likes:
        type: integer
      postedBy:
        type: string
      title:
        type: string
    type: object
  model.Schedule:
    properties:
      dayOfWeek:
        type: integer
      id:
        type: integer
      name:
        type: string
      routineIds:
        items:
          type: integer
        type: array
      routineLengthMinutes:
        type: integer
      timeSlot:
        type: string
      userId:
        type: integer
    type: object
  model.UpdateScheduleRequest:
    properties:
      dayOfWeek:
        type: integer
      id:
        type: integer
      name:
        type: string
      routineIds:
        items:
          type: integer
        type: array
      routineLengthMinutes:
        type: integer
      timeSlot:
        type: string
      userId:
        type: integer
    type: object
  model.UpdateUserRequest:
    properties:
      age:
        type: integer
      avatar:
        type: string
      email:
        type: string
      height:
        type: number
      heightMetric:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      username:
        type: string
      weight:
        type: number
      weightMetric:
        type: string
    type: object
  model.User:
    properties:
      achievements:
        items:
          $ref: '#/definitions/model.UserAchievement'
        type: array
      age:
        type: integer
      avatar:
        type: string
      email:
        type: string
      followers:
        items:
          type: integer
        type: array
      following:
        items:
          type: integer
        type: array
      goals:
        items:
          $ref: '#/definitions/model.Goal'
        type: array
      googleId:
        type: string
      height:
        type: number
      heightMetric:
        type: string
      id:
        type: integer
      isVerified:
        type: boolean
      name:
        type: string
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
      provider:
        type: string
      routines:
        items:
          $ref: '#/definitions/model.ExerciseRoutine'
        type: array
      username:
        type: string
      weight:
        type: number
      weightMetric:
        type: string
    type: object
  model.UserAchievement:
    properties:
      badgeIcon:
        type: string
      description:
        type: string
      earnedAt:
        type: string
      id:
        type: integer
      title:
        type: string
      userId:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/google:
    post:
      consumes:
      - application/json
      parameters:
      - description: Google ID token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.GoogleAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Invalid request or token
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Authenticate with Google OAuth
      tags:
      - Authentication
  /exercises:
    get:
      consumes:
      - application/json
      parameters:
      - description: Primary target muscle
        in: query
        name: target
        type: string
      - description: Training intensity
        in: query
        name: intensity
        type: string
      - description: Recommended expertise level
        in: query
        name: expertise
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Exercises retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.Exercise'
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: List exercises
      tags:
      - Exercises
    post:
      consumes:
      - application/json
      description: Creates a custom exercise with metadata such as targets, intensity,
        expertise, and media references.
      parameters:
      - description: New exercise payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateExerciseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exercise created successfully
          schema:
            $ref: '#/definitions/model.Exercise'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Create a new exercise
      tags:
      - Exercises
  /exercises/{id}:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Exercises retrieved successfully
          schema:
            $ref: '#/definitions/model.Exercise'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Returns the exercise with the corresponding ID
      tags:
      - Exercises
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and sets access_token as cookie
      parameters:
      - description: comment
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Logs in a user
      tags:
      - auth
  /logout:
    post:
      responses:
        "200":
          description: successful logout
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Logs out user by clearing access_token
      tags:
      - auth
  /me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get current authenticated user
      tags:
      - auth
  /me/schedules:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
      summary: Read all schedules for the authenticated user
      tags:
      - schedules
  /me/schedules/{dayOfWeek}:
    get:
      parameters:
      - description: Day of week (0-6)
        in: path
        name: dayOfWeek
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
      summary: Read schedules for the authenticated user on a specific day
      tags:
      - schedules
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - description: If true, only posts from followed users are returned
        in: query
        name: followings
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Posts retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: List posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      parameters:
      - description: New post payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Posts
  /posts/comment:
    post:
      consumes:
      - application/json
      parameters:
      - description: Target post and comment text
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CommentOnPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment added successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Comment on a post
      tags:
      - Posts
  /posts/like:
    post:
      consumes:
      - application/json
      parameters:
      - description: Target post to like
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LikePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Post liked successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - Posts
  /routines/{id}:
    delete:
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Routine deleted successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid routine ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: Routine not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Delete a routine
      tags:
      - Routines
    get:
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Routine with exercises retrieved successfully
          schema:
            $ref: '#/definitions/model.ExerciseRoutine'
        "400":
          description: Invalid routine ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: Routine not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get routine with exercises
      tags:
      - Routines
  /routines/{id}/exercises:
    post:
      consumes:
      - application/json
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exercise ID
        in: query
        name: exercise_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exercise added to routine successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Add exercise to routine
      tags:
      - Routines
  /routines/{id}/exercises/{exercise_id}:
    delete:
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exercise ID
        in: path
        name: exercise_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exercise removed from routine successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Remove exercise from routine
      tags:
      - Routines
  /schedules:
    post:
      consumes:
      - application/json
      parameters:
      - description: Schedule create payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateScheduleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Schedule'
      summary: Create a schedule
      tags:
      - schedules
  /schedules/{id}:
    delete:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a schedule
      tags:
      - schedules
    get:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
      summary: Read schedule by ID
      tags:
      - schedules
    put:
      consumes:
      - application/json
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Schedule update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
      summary: Update a schedule
      tags:
      - schedules
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: New user payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BasicResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Delete user by ID
      tags:
      - Users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Update user by ID
      tags:
      - Users
  /users/{id}/follow:
    post:
      parameters:
      - description: User ID to follow
        in: path
        name: id
        required: true
        type: integer
      - description: Follower user ID
        in: query
        name: follower_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully followed user
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Follow a user
      tags:
      - Relationships
  /users/{id}/followers:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Follower IDs retrieved successfully
          schema:
            items:
              format: int64
              type: integer
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: List a user's followers
      tags:
      - Relationships
  /users/{id}/following:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Following IDs retrieved successfully
          schema:
            items:
              format: int64
              type: integer
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: List users that the target user is following
      tags:
      - Relationships
  /users/{id}/goals:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Goals retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.Goal'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get all goals for a user
      tags:
      - Goals
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Goal payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateGoalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Goal created successfully
          schema:
            $ref: '#/definitions/model.Goal'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create a goal for user
      tags:
      - Goals
  /users/{id}/routines:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Routines retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.ExerciseRoutine'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get all routines for a user
      tags:
      - Routines
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Routine payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoutineRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Routine created successfully
          schema:
            $ref: '#/definitions/model.ExerciseRoutine'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create a workout routine for user
      tags:
      - Routines
  /users/{id}/routines/{routine_id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Routine ID
        in: path
        name: routine_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Routine deleted successfully
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "404":
          description: Routine not found
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Delete user's routine
      tags:
      - Routines
  /users/{id}/unfollow:
    post:
      parameters:
      - description: User ID to unfollow
        in: path
        name: id
        required: true
        type: integer
      - description: Follower user ID
        in: query
        name: follower_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unfollowed user
          schema:
            $ref: '#/definitions/model.BasicResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Unfollow a user
      tags:
      - Relationships
swagger: "2.0"
